const {desc, task} = require('jake');
const {run} = require('../build-support/Run');
const fs = require('fs/promises');
const path = require('path');

const projectDir = __dirname;
const rootDir = path.dirname(__dirname);
const buildDir = path.join(projectDir, 'build');
const appBuildDir = path.join(buildDir, 'app');
const frontendDist = path.join(rootDir, 'frontend', 'dist')
const backendProjectDir = path.join(rootDir, 'backend')
const backendDist = path.join(backendProjectDir, 'dist')

task('clean', async () => {
    await fs.rm(appBuildDir, {recursive: true, force: true})
    await fs.mkdir(appBuildDir, {recursive: true});
});

const buildPackageJson = async () => {
    const rootPackageJsonString = await fs.readFile(path.join(rootDir, 'package.json'), {encoding: 'utf-8'});
    const rootPackageJson = JSON.parse(rootPackageJsonString)
    const newPackageJson = {
        dependencies: rootPackageJson['dependencies'],
        scripts: {
            installBackend: 'npm --prefix backend clean-install',
            start: 'node backend/index.js',
        },
    }
    const newPackageJsonString = JSON.stringify(newPackageJson);

    await fs.writeFile(path.join(appBuildDir, 'package.json'), newPackageJsonString);
};

task('app-artifact', async () =>{
    await fs.cp(path.join(projectDir, 'app'), path.join(appBuildDir), {recursive: true});
    await fs.cp(path.join(projectDir, 'app'), path.join(appBuildDir), {recursive: true});
    await fs.cp(frontendDist, path.join(appBuildDir, 'frontend'), {recursive: true});
    await fs.cp(backendDist, path.join(appBuildDir, 'backend'), {recursive: true});

    await buildPackageJson();

    await fs.cp(path.join(rootDir, 'package-lock.json'), path.join(appBuildDir, 'package-lock.json'));
    await fs.cp(path.join(backendProjectDir, 'package.json'), path.join(appBuildDir, 'backend', 'package.json'));
    await fs.cp(path.join(backendProjectDir, 'package-lock.json'), path.join(appBuildDir, 'backend', 'package-lock.json'));

    process.chdir(buildDir);

    await run('tar czf app.tgz app');
});

task('app-container', async () => {
    await run('pack build starter-app ' +
        `--path ${appBuildDir} ` +
        '--env BP_NODE_VERSION=20 ' +
        '--env BP_NODE_RUN_SCRIPTS=installBackend ' +
        '--builder paketobuildpacks/builder:base ' +
        '--buildpack gcr.io/paketo-buildpacks/nginx ' +
        '--buildpack gcr.io/paketo-buildpacks/nodejs ' +
        '--buildpack gcr.io/paketo-buildpacks/node-run-script '
    );

    process.chdir(buildDir);

    await run(`docker save starter-app:latest | gzip > app-container.tgz`);
});

desc('deployments - create app container');
task('app', ['frontend:build', 'backend:build', 'app-artifact', 'app-container']);
