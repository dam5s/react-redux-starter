const {fail, task, desc} = require('jake');
const {cpus} = require('os');
const {run, npm, npx} = require('../build-support/Run');
const {Pool} = require('pg');


const projectDir = __dirname;
const databaseUser = 'ts_monorepo_db_user';
const databasePassword = 'secret';
const devDatabase = 'ts_monorepo_db_dev';
const databaseHost = () => process.env['DB_HOST'] || 'localhost';


/**
 * @param {string} name
 * @returns {number | null}
 */
const tryGetIntFromEnv = (name) => {
    const stringValue = process.env[name];
    if (!stringValue) {
        return null;
    }

    const intValue = parseInt(stringValue);
    if (isNaN(intValue)) {
        return null;
    }

    return intValue;
}

/**
 * @returns {Array<string>}
 */
const localDatabases = () => {
    const defaultJestMaxWorkers = () => cpus().length - 1;
    const envMaxWorkers = tryGetIntFromEnv('JEST_MAX_WORKERS');
    const maxWorkers = envMaxWorkers || defaultJestMaxWorkers();

    const databases = [devDatabase];

    for (let i = 0; i < maxWorkers; i ++) {
        databases.push(`ts_monorepo_db_tests_${i + 1}`);
    }

    return databases;
}

/**
 * @param {string} name
 * @returns {string}
 */
const databaseUrl = (name) =>
    `postgres://${databaseUser}:${databasePassword}@${databaseHost()}/${name}`;

task('fromProjectDir', () => process.chdir(projectDir));

desc('database - install dependencies');
task('install', ['fromProjectDir'], () => npm('install'));

desc('database - create local databases');
task('create', async () => {
    const db = new Pool({
        user: 'postgres',
        database: 'postgres',
        password: process.env['PGPASSWORD'],
        port: 5432,
        host: databaseHost(),
    });

    try {
        const databaseNames = localDatabases();

        for (const dbName of databaseNames) {
            await db.query(`drop database if exists ${dbName}`);
        }

        await db.query(`drop user if exists ${databaseUser}`);
        await db.query(`create user ${databaseUser} with password '${databasePassword}'`);

        for (const dbName of databaseNames) {
            await db.query(`create database ${dbName}`);
            await db.query(`grant all privileges on database ${dbName} to ${databaseUser}`);
        }
    } finally {
        await db.end();
    }
});

desc('database - migrate local databases');
task('migrate', ['install'], async () => {
    for (const database of localDatabases()) {
        await npx('db-migrate up', {DATABASE_URL: databaseUrl(database)});
    }
});

desc('database - load seed data into dev database');
task('seed', ['fromProjectDir'], async () => {
    await run(`psql -U ${databaseUser} -f src/seed.sql ${devDatabase}`);
});

desc('database - create new migration');
task('new-migration', ['fromProjectDir'], async (name) => {
    if (name === undefined) {
        fail('Expected name of migration passed as argument');
    }

    await npx(`db-migrate create ${name}`);
});
